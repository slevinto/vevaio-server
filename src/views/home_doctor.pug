extends layout
            
block content
    div.my-8
        img(src='main_logo.png')
        
    div.justify-start            
        div.mr-32.inline-block
            h1.text-purple-700.text-xl.font-bold Please choose the patient to see graphs
            div.select-box
                div.options-container(id='optionscontainergraph')
                    each val, index in [...new Set(data.map(item => item[0]))] 
                        div.option 
                            input(type='radio').radio
                            label #{val}        

                div.selected(id='selectedgraph')
                div.search-box(id='searchboxgraph')                       
                    input(type='text', placeholder='Search...') 
                
        div.mr-8.inline-block
            h1.text-purple-700.text-xl.font-bold Please choose the patient to invite
            div.select-box
                div.options-container(id='optionscontainerinvite')
                    each val, index in users
                        div.option 
                            input(type='radio').radio
                            label #{val}        

                div.selected(id='selectedinvite')
                div.search-box(id='searchboxinvite')                      
                    input(type='text', placeholder='Search...') 

        button.inline-block.bg-purple-200.p-2.invisible Send Email

    div.mt-8
        div(id='heartrate', style={width: '90%'}).overflow-x-scroll.invisible    
            .chart-container
                canvas(id="heartratechart", width='1200px')      
    div.mt-8
        div(id='steps', style={width: '90%'}).overflow-x-scroll.invisible   
            .chart-container
                canvas(id="stepschart", width='1200px')   
    div.mt-8
        div(id='burnedcalories', style={width: '90%'}).overflow-x-scroll.invisible   
            .chart-container
                canvas(id="burnedcalorieschart", width='1200px')     
    div.mt-8
        div(id='activityduration', style={width: '90%'}).overflow-x-scroll.invisible   
            .chart-container
                canvas(id="activitydurationchart", width='1200px')                                     
    script.
        const selectedInvite = document.getElementById('selectedinvite')
        const optionsContainerInvite = document.getElementById('optionscontainerinvite')
        const searchBoxInvite = document.getElementById('searchboxinvite').querySelector(".search-box input")
        const optionsListInvite = optionsContainerInvite.querySelectorAll(".option")

        const selectedGraph = document.getElementById('selectedgraph')
        const optionsContainerGraph = document.getElementById('optionscontainergraph')
        const searchBoxGraph = document.getElementById('searchboxgraph').querySelector(".search-box input")
        const optionsListGraph = optionsContainerGraph.querySelectorAll(".option")

        const btn = document.querySelector('button')

        function buildGraph(selectedPatient)
        {
            var jsonvalues = !{JSON.stringify(data)}
            
            document.getElementById('heartrate').style.visibility='visible'
            document.getElementById('steps').style.visibility='visible'
            document.getElementById('burnedcalories').style.visibility='visible'
            document.getElementById('activityduration').style.visibility='visible'
                             
            var heartratevalues = []
            for (let i = 0; i < jsonvalues.length; i++){
                if(jsonvalues[i][0] == selectedPatient && jsonvalues[i][1] === 'Vitals' && jsonvalues[i][2] === 'Resting Heart Rate')
                    heartratevalues.push([jsonvalues[i][3], jsonvalues[i][4]]) 
            }
            heartratevalues = Array.from(new Set(heartratevalues.map(JSON.stringify))).map(JSON.parse)
            heartratevalues = heartratevalues.sort((a, b) => a[0] - b[0])
            
            var stepvalues = []
            for (let i = 0; i < jsonvalues.length; i++){
                if(jsonvalues[i][0] === selectedPatient && jsonvalues[i][1] === 'Activity' && jsonvalues[i][2] === 'Steps')
                    stepvalues.push([jsonvalues[i][3], jsonvalues[i][4]]) 
            }
            stepvalues = Array.from(new Set(stepvalues.map(JSON.stringify))).map(JSON.parse)
            stepvalues = stepvalues.sort((a, b) => a[0] - b[0])
            
            var burnedcaloriesvalues = []
            for (let i = 0; i < jsonvalues.length; i++){
                if(jsonvalues[i][0] === selectedPatient && jsonvalues[i][1] === 'Activity' && jsonvalues[i][2] === 'Burned Calories')
                    burnedcaloriesvalues.push([jsonvalues[i][3], jsonvalues[i][4]]) 
            }
            burnedcaloriesvalues = Array.from(new Set(burnedcaloriesvalues.map(JSON.stringify))).map(JSON.parse)
            burnedcaloriesvalues = burnedcaloriesvalues.sort((a, b) => a[0] - b[0])

            var activitydurationvalues = []
            for (let i = 0; i < jsonvalues.length; i++){
                if(jsonvalues[i][0] === selectedPatient && jsonvalues[i][1] === 'Activity' && jsonvalues[i][2] === 'Activity Duration')
                    activitydurationvalues.push([jsonvalues[i][3], jsonvalues[i][4]]) 
            }
            activitydurationvalues = Array.from(new Set(activitydurationvalues.map(JSON.stringify))).map(JSON.parse)
            activitydurationvalues = activitydurationvalues.sort((a, b) => a[0] - b[0])

            var ctxheartrate = document.getElementById("heartratechart").getContext('2d')
            var heartratechart = new Chart(ctxheartrate, {
                type: 'line',
                data: {
                    labels: heartratevalues.map(item => new Date(item[0]).toLocaleString("en", {month: "2-digit", day: "numeric"})),
                    datasets: [{
                        data: heartratevalues.map(item => item[1]),                                 
                        backgroundColor: 'PaleTurquoise'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    title: {
                        display: true,
                        text: "Heart Rate",
                        fontSize: 24,
                        fontColor: 'purple'
                    },
                    legend: {
                        display: false                                    
                    },
                    elements: {
                        point:{
                            radius: 0
                        }
                    },
                    scales: {
                        xAxes: [{                                            
                            stacked: false,
                            gridLines: {
                                    display:false
                            },
                            ticks: { 
                                fontColor: 'purple',                                              
                            },                                                                                      
                        }],
                        yAxes: [{
                            stacked: false,
                            gridLines: {
                                    display:false
                            },
                            ticks: {
                                fontColor: 'purple',   
                            }
                        }]
                    }
                }
            })                        
        
            var ctxsteps = document.getElementById("stepschart").getContext('2d')
            var stepschart = new Chart(ctxsteps, {
                type: 'line',
                data: {
                    labels: stepvalues.map(item => new Date(item[0]).toLocaleString("en", {month: "2-digit", day: "numeric"})),
                    datasets: [{
                        data: stepvalues.map(item => item[1]),
                        backgroundColor: 'PaleTurquoise'                                 
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    title: {
                        display: true,
                        text: "Steps",
                        fontSize: 24,
                        fontColor: 'purple'
                    },
                    legend: {
                        display: false                                    
                    },
                    elements: {
                        point:{
                            radius: 0
                        }
                    },
                    scales: {
                        xAxes: [{
                            stacked: false,
                            gridLines: {
                                    display:false
                            },
                            ticks: {
                                fontColor: 'purple',   
                            },
                        }],
                        yAxes: [{
                            stacked: true,
                            gridLines: {
                                    display:false
                            },
                            ticks: {
                                fontColor: 'purple',   
                            }
                        }]
                    }
                }
            }) 

            var ctxburnedcalories = document.getElementById("burnedcalorieschart").getContext('2d')
            var burnedcalorieschart = new Chart(ctxburnedcalories, {
                type: 'line',
                data: {
                    labels: burnedcaloriesvalues.map(item => new Date(item[0]).toLocaleString("en", {month: "2-digit", day: "numeric"})),
                    datasets: [{
                        data: burnedcaloriesvalues.map(item => item[1]),                                 
                        backgroundColor: 'PaleTurquoise'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    title: {
                        display: true,
                        text: "Burned Calories",
                        fontSize: 24,
                        fontColor: 'purple'
                    },
                    legend: {
                        display: false                                    
                    },
                    elements: {
                        point:{
                            radius: 0
                        }
                    },
                    scales: {
                        xAxes: [{                                            
                            stacked: false,
                            gridLines: {
                                    display:false
                            },
                            ticks: { 
                                fontColor: 'purple',                                              
                            },                                                                                      
                        }],
                        yAxes: [{
                            stacked: false,
                            gridLines: {
                                    display:false
                            },
                            ticks: {
                                fontColor: 'purple',   
                            }
                        }]
                    }
                }
            })    

            var ctxactivityduration = document.getElementById("activitydurationchart").getContext('2d')
            var activitydurationchart = new Chart(ctxactivityduration, {
                type: 'line',
                data: {
                    labels: activitydurationvalues.map(item => new Date(item[0]).toLocaleString("en", {month: "2-digit", day: "numeric"})),
                    datasets: [{
                        data: activitydurationvalues.map(item => item[1]),                                 
                        backgroundColor: 'PaleTurquoise'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    title: {
                        display: true,
                        text: "Activity Duration",
                        fontSize: 24,
                        fontColor: 'purple'
                    },
                    legend: {
                        display: false                                    
                    },
                    elements: {
                        point:{
                            radius: 0
                        }
                    },
                    scales: {
                        xAxes: [{                                            
                            stacked: false,
                            gridLines: {
                                    display:false
                            },
                            ticks: { 
                                fontColor: 'purple',                                              
                            },                                                                                      
                        }],
                        yAxes: [{
                            stacked: false,
                            gridLines: {
                                    display:false
                            },
                            ticks: {
                                fontColor: 'purple',   
                            }
                        }]
                    }
                }
            })                             
        }

        btn.addEventListener("click", () => {
            var link = "mailto:" + selectedInvite.innerHTML.trim() +
                       "&subject=" + encodeURIComponent("This is my subject") +
                       "&body=" + encodeURIComponent("hello slava")
    
            window.location.href = link
        })

        selectedInvite.addEventListener("click", () => {
            optionsContainerInvite.classList.toggle("active")
            searchBoxInvite.value = ""
            filterListInvite("")

            if (optionsContainerInvite.classList.contains("active")) {
                searchBoxInvite.focus()
            }
        })

        selectedGraph.addEventListener("click", () => {
            optionsContainerGraph.classList.toggle("active")
            searchBoxGraph.value = ""
            filterListGraph("")

            if (optionsContainerGraph.classList.contains("active")) {
                searchBoxGraph.focus()
            }
        })

        optionsListInvite.forEach(o => {
            o.addEventListener("click", () => {
                selectedInvite.innerHTML = o.querySelector("label").innerHTML
                optionsContainerInvite.classList.remove("active") 
                btn.style.visibility='visible'               
            })
        })

        optionsListGraph.forEach(o => {
            o.addEventListener("click", () => {
                selectedGraph.innerHTML = o.querySelector("label").innerHTML
                optionsContainerGraph.classList.remove("active")
                buildGraph(selectedGraph.innerHTML.trim())                
            })
        })

        searchBoxInvite.addEventListener("keyup", function(e) {
            filterListInvite(e.target.value)
        })

        searchBoxGraph.addEventListener("keyup", function(e) {
            filterListGraph(e.target.value)
        })

        const filterListInvite = searchTerm => {
            searchTerm = searchTerm.toLowerCase()
            optionsListInvite.forEach(option => {
                let label = option.firstElementChild.nextElementSibling.innerText.toLowerCase()
                if (label.indexOf(searchTerm) > -1) {
                    option.style.display = 'block'
                } 
                else {
                    option.style.display = 'none'
                    option.style.marginTop = '0px'                    
                }
            })
            var foundFirstElem = false
            optionsListInvite.forEach(option => {
                if (option.style.display === 'block')
                {
                    if (foundFirstElem === false)
                    {
                         option.style.marginTop = '45px'
                         foundFirstElem = true
                    }
                    else {
                        option.style.marginTop = '0px' 
                    }                    
                }
                else
                {
                    option.style.marginTop = '0px' 
                }
            })
        }

        const filterListGraph = searchTerm => {
            searchTerm = searchTerm.toLowerCase()
            optionsListGraph.forEach(option => {
                let label = option.firstElementChild.nextElementSibling.innerText.toLowerCase()
                if (label.indexOf(searchTerm) > -1) {
                    option.style.display = 'block'
                } 
                else {
                    option.style.display = 'none'
                    option.style.marginTop = '0px'                    
                }
            })
            var foundFirstElem = false
            optionsListGraph.forEach(option => {
                if (option.style.display === 'block')
                {
                    if (foundFirstElem === false)
                    {
                         option.style.marginTop = '45px'
                         foundFirstElem = true
                    }
                    else {
                        option.style.marginTop = '0px' 
                    }                    
                }
                else
                {
                    option.style.marginTop = '0px' 
                }
            })
        }        
        
    style. 
        .select-box {
            position: relative;
            display: flex;
            width: 348px;
            flex-direction: column;
        }
        .select-box .options-container {
            width: 100%;
            opacity: 0;
            border-radius: 8px;
            overflow: hidden;
            order: 1;
            color: rgb(56, 52, 52);
        }
        .select-box .option, .selected {
            padding: 12px 24px;
            cursor: pointer;
        }
        .select-box .option .radio {
            display: none;
        }
        .selected {
            border-radius: 8px;
            margin-bottom: 8px;
            color: rgb(56, 52, 52);
            position: relative;
            order: 0;
        }
        .selected:after{  
            content: '\f106';
            position: absolute;
            right: 20px;        
            font-family: 'Font Awesome 5 Free';
            font-weight: 700;        
            color: black;
            transform: rotate(180deg);
            transition: all .4s;        
        }  
        .select-box .option:hover {
            background: #F1FFF3;;
            border-radius: 5px;
            color: #8AD891;        
        }
        .select-box .option input:hover{
            font-weight: 700px;
        }
        .search-box input {
            width: 100%;
            padding: 16px 16px;
            font-family: Roboto, sans-serif;
            font-size: 16px;
            position: absolute;
            /* outline: none; */
            opacity: 0;
            outline: 3px solid black;
            outline-offset: -10px;
            z-index: 100;
            border: none;
        }
        .select-box .options-container.active {
            max-height: 240px;
            opacity: 1;
            overflow-y: scroll;
            transition: all 0.4s;
        }
        .select-box .options-container.active ~ .selected::after {
            transform: rotateY(180deg);
        }
        .select-box .options-container::-webkit-scrollbar {
            width: 7px;
            background: #888;
            border-radius:  8px ;
            height: 1px;
        }
        .select-box .options-container::-webkit-scrollbar-thumb {
            background: #464749;
            border-radius: 8px 8px 8px 8px;

        }
        .select-box .options-container.active ~ .search-box input {
            opacity: 1;
            pointer-events: auto;
        }
                                    
                            
                                