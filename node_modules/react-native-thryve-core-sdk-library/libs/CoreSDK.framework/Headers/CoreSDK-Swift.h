// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class WKWebView;
@class CustomerValue;
@class User;
@class UserInformation;
@class Tracker;

/// The main SDK class for performing actions on integration and processing user data
SWIFT_CLASS_NAMED("CoreConnector")
@interface CoreConnector : NSObject
/// Initializes a ThryveConnector object.
/// \param appId current application id.
///
/// \param appSecret current application secret.
///
/// \param partnerUserId (Optional) company’s partner id. “nil” is set by default
///
/// \param language (Optional) set the language code i.e “en” of “fr”. It is needed to display the Data Source page translated to a selected language. If not set, the “de” is by default
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId appSecret:(NSString * _Nonnull)appSecret partnerUserId:(NSString * _Nullable)partnerUserId language:(NSString * _Nullable)language OBJC_DESIGNATED_INITIALIZER;
/// Sets the provided access token manually and save it in a keychain
/// Parameters:
/// \param accessToken Access token to save.
///
- (void)setAccessToken:(NSString * _Nonnull)accessToken;
/// Invokes the REST API asynchronously to retrieve accessToken.
/// Parameters:
/// \param language (Optional) set the language code i.e “en” of “fr”. It is needed to display the Data Source page translated to a selected language. If not set, the “de” is by default
///
/// \param onSuccess On success callback when access token was retrieved successfully.
///
/// \param onError On error callback.
///
- (void)getAccessTokenOnSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Invokes the REST API asynchronously to generate a new DataSource Url.
/// requires:
/// before calling this function, call “getAccessToken” first!
/// \param onSuccess On success callback when dataSource url was retrieved successfully.
///
/// \param onError On error callback.
///
- (void)getDataSourceUrlOnSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Invokes the REST API asynchronously to request Data Source Connection and present the webView with list of all avaliable Trackers.
/// requires:
/// before calling this function, call “getAccessToken” first!
/// \param webView WebView displaying the Tracker’s auth page
///
/// \param onError On error callback
///
- (void)handleDataSourceConnectionWithLoadOn:(WKWebView * _Nonnull)webView onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Performs user constant data upload.
/// requires:
/// uses accessToken to upload data
/// \param onError will be called, if there is a network error, or if there is no saved access token.
///
- (void)uploadConstantValueWithData:(CustomerValue * _Nonnull)data onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Performs user daily data upload.
/// requires:
/// uses accessToken to upload data
/// \param onError will be called, if there is a network error, or if there is no saved access token.
///
- (void)uploadDailyDynamicValueWithData:(CustomerValue * _Nonnull)data onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Performs user daily data upload.
/// requires:
/// uses accessToken to upload data
/// \param onError will be called, if there is a network error, or if there is no saved access token.
///
- (void)uploadUserInformationWithData:(User * _Nonnull)data onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Performs user information retrieval.
/// requires:
/// uses accessToken to upload data
/// \param onError will be called, if there is a network error, or if there is no saved access token.
///
- (void)getUserInformationOnSuccess:(void (^ _Nonnull)(NSArray<UserInformation *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Invokes the REST API asynchronously to request Data Source Direct Connection. Call this function directly in viewDidLoad() method
/// requires:
/// before calling this function, call “getAccessToken” first!
/// \param isConnection if “true” revoke tracker access will be performed, if “false” direct tracker connection will be performed
///
/// \param isInstantRevoke (default false) if true the token revoke will be performed without loading of the logout web page
///
/// \param dataSource The tracker
///
/// \param webView WebView displaying the Tracker’s auth page
///
/// \param onError On error callback
///
- (void)requestHandleDataSourceDirectConnectionWithIsConnection:(BOOL)isConnection isInstantRevoke:(BOOL)isInstantRevoke for:(Tracker * _Nonnull)dataSource listenTo:(WKWebView * _Nonnull)webView onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
/// Invokes the REST API asynchronously to handle Response for Data Source Direct Connection. Call this function directly in didFinishNavigation() method of WKWebViewDelegate
/// requires:
/// before calling this function, call “getAccessToken” first!
/// \param onResult Get the response of tracker access returning the appropriate response url and the connection status
///
/// \param onError On error callback.
///
- (void)responseHandleDataSourceDirectConnectionOnResult:(void (^ _Nonnull)(NSURL * _Nonnull, BOOL))onResult onError:(void (^ _Nonnull)(NSError * _Nonnull))onError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CustomerPayload;

/// A Struct model for Thryve dynamic data. Use this to create Constant or Dayily values for customer’s backchannel support.
SWIFT_CLASS_NAMED("CustomerValue")
@interface CustomerValue : NSObject
/// Creates a Codable object (JSON) for body of the REST request
/// \param data the payload, a collection of user’s daily or constant values
///
- (nonnull instancetype)initWithData:(NSArray<CustomerPayload *> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DataType;

/// A Struct model for dynamic data payload
SWIFT_CLASS_NAMED("CustomerPayload")
@interface CustomerPayload : NSObject
/// Creates an instance of the payload node for Constant Value.
/// \param value the value of a measurement in a string representation.
///
/// \param type the type recognized by Thryve services.
///
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value of:(DataType * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of the payload node for Daily Value.
/// \param value the value of a measurement in a string representation.
///
/// \param day a desired day.
///
/// \param type the type recognized by Thryve services.
///
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value of:(DataType * _Nonnull)type on:(NSDate * _Nonnull)day;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ValueType : int16_t;

/// An abstract available Thryve data type.
SWIFT_CLASS_NAMED("DataType")
@interface DataType : NSObject
@property (nonatomic) enum ValueType valueType;
@property (nonatomic) int16_t type;
@property (nonatomic, copy) NSString * _Nullable name;
/// Creates an instance of ThryveDataType
/// \param type the integer value of the data type recognised by Thryve
///
/// \param valueType the type of the value (boolean, long etc.)
///
/// \param name (optional) provide a custon name for a type
///
- (nonnull instancetype)init:(int16_t)type :(enum ValueType)valueType :(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum of available Genders
typedef SWIFT_ENUM_NAMED(NSInteger, Gender, "Gender", open) {
  GenderMale = 0,
  GenderFemale = 1,
  GenderGenderless = 2,
};


SWIFT_CLASS("_TtC7CoreSDK13NetworkClient")
@interface NetworkClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NetworkClient (SWIFT_EXTENSION(CoreSDK)) <NSURLSessionDelegate>
@end


/// A Tracker class for devices which are responsible for gathering the user’s data
SWIFT_CLASS_NAMED("Tracker")
@interface Tracker : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Use this init to create an instance of a DataSource according to Thryve documentation
- (nonnull instancetype)init:(NSString * _Nullable)name :(NSInteger)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

/// A Struct model for User
SWIFT_CLASS_NAMED("User")
@interface User : NSObject
/// Creates an instance of the payload node for User.
/// \param height the users’s height
///
/// \param weight the users’s weight
///
/// \param birthdate the users’s birthdate string in format yyyy-MM-dd
///
/// \param gender the users’s gender
///
- (nonnull instancetype)initWithHeight:(NSNumber * _Nullable)height weight:(NSNumber * _Nullable)weight birthdate:(NSString * _Nullable)birthdate gender:(enum Gender)gender OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Thryve stored user infromation.
SWIFT_CLASS_NAMED("UserInformation")
@interface UserInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ConnectedSource")
@interface ConnectedSource : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Supported value types
typedef SWIFT_ENUM_NAMED(int16_t, ValueType, "ValueType", open) {
  ValueTypeDouble = 0,
  ValueTypeLong = 1,
  ValueTypeBoolean = 2,
  ValueTypeDate = 3,
  ValueTypeString = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
