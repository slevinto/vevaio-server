// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreSDK
@_exported import CoreSDK
import Foundation
import LocalAuthentication
import Security
import Swift
import WebKit
public enum Intraday : Swift.RawRepresentable, Swift.CaseIterable {
  case steps
  case coveredDistance
  case floorsClimbed
  case burnedCalories
  case activeBurnedCalories
  case charge
  case doffed
  case sleep
  case rest
  case active
  case walk
  case run
  case bike
  case transport
  case activityIntensity
  case latitude
  case longitude
  case activityType
  case activityTypeDetail1
  case activityTypeDetail2
  case sleepState
  case sleepInBed
  case sleepDeep
  case sleepAwake
  case sleepIntensity
  case hearRate
  case rmssd
  case respirationRate
  case heartRateResting
  case bloodOxygen
  case bodyTemperature
  case bloodPressureSystolic
  case bloodPressureDiastolic
  case vo2max
  case bloodGlucose
  case consumedCalories
  case consumedCarbohydrates
  case consumedFiber
  case consumedSugar
  case consumedFat
  case consumedSaturatedFat
  case consumedProtein
  case consumedVitaminA
  case consumedVitaminB1
  case consumedVitaminB2
  case consumedVitaminB3
  case consumedVitaminB5
  case consumedVitaminB6
  case consumedVitaminB12
  case consumedVitaminC
  case consumedVitaminD
  case consumedVitaminE
  case consumedVitaminK
  case consumedCalcium
  case consumedIron
  case consumedMagnesium
  case consumedPhosphorus
  case consumedPotassium
  case consumedSodium
  case consumedZinc
  case consumedIodine
  case sexualEvent
  case menstraulBleeding
  case cycleLength
  case pregnancyTest
  case vaginalDischarge
  case batteryLevel
  case appUsageTime
  case screenBrightness
  case spo2
  case peakFlowRate
  case interbeatIntervals
  public var rawValue: CoreSDK.DataType {
    get
  }
  public init?(rawValue: CoreSDK.DataType)
  public typealias RawValue = CoreSDK.DataType
  public typealias AllCases = [CoreSDK.Intraday]
  public static var allCases: [CoreSDK.Intraday] {
    get
  }
}
@objc(UserInformation) public class UserInformation : ObjectiveC.NSObject {
  final public let authenticationToken: Swift.String
  final public let partnerUserID: Swift.String?
  final public let height: Swift.Int?
  final public let weight: Swift.Double?
  final public let birthdate: Swift.String?
  final public let connectedSources: [CoreSDK.UserInformation.ConnectedSource]
  @objc(ConnectedSource) public class ConnectedSource : ObjectiveC.NSObject {
    final public let dataSource: Swift.Int
    final public let connectedAt: Swift.String
    public init(dataSource: Swift.Int, connectedAt: Swift.String)
    @objc override dynamic public init()
    @objc deinit
  }
  public init(authenticationToken: Swift.String, partnerUserID: Swift.String?, height: Swift.Int?, weight: Swift.Double?, birthdate: Swift.String?, connectedSources: [CoreSDK.UserInformation.ConnectedSource])
  @objc override dynamic public init()
  @objc deinit
}
final public class StringUtils {
  public static func query(parameters: [Swift.String : Swift.String]) -> Swift.String
  public static func get(from string: Swift.String) -> Foundation.Data
  @objc deinit
}
public enum Constant : Swift.RawRepresentable, Swift.CaseIterable {
  case smokingStatus
  case smokingHistory
  public var rawValue: CoreSDK.DataType {
    get
  }
  public init?(rawValue: CoreSDK.DataType)
  public typealias RawValue = CoreSDK.DataType
  public typealias AllCases = [CoreSDK.Constant]
  public static var allCases: [CoreSDK.Constant] {
    get
  }
}
open class Request {
  public var request: Foundation.URLRequest
  public init(endPoint: Swift.String, httpMethod: CoreSDK.HttpUtils.Method, contentType: Swift.String, requestBody: Swift.String? = nil, appId: Swift.String, appSecret: Swift.String)
  @objc deinit
}
@objc(CustomerValue) final public class CustomerValue : ObjectiveC.NSObject, CoreSDK.ValueProtocol {
  final public let data: [CoreSDK.CustomerValue.CustomerPayload]
  @objc public init(data: [CoreSDK.CustomerValue.CustomerPayload])
  @objc(CustomerPayload) final public class CustomerPayload : ObjectiveC.NSObject, Swift.Codable {
    @objc public init(value: Swift.String, of type: CoreSDK.DataType)
    @objc convenience public init(value: Swift.String, of type: CoreSDK.DataType, on day: Foundation.Date)
    @objc override dynamic public init()
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public typealias Payload = CoreSDK.CustomerValue.CustomerPayload
}
@objc(DataType) open class DataType : ObjectiveC.NSObject {
  @objc public var valueType: CoreSDK.ValueType
  @objc public var type: Swift.Int16
  @objc public var name: Swift.String?
  @objc public init(_ type: Swift.Int16, _ valueType: CoreSDK.ValueType, _ name: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
final public class Details : Swift.Codable {
  public enum Generation : Swift.String {
    case manualEntry
    case manualMeasurement
    case automatedMeasurement
    case calculation
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Trustworthiness : Swift.String {
    case plausible
    case verifiedFromDeviceSource
    case verifiedFromUser
    case verifiedFromExternalSource
    case unlikely
    case implausible
    case unfavorableMeasurementContext
    case insufficientDatabase
    case doubtFromDeviceSource
    case doubtFromUser
    case doubtFromExternalSource
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UserReliability : Swift.String {
    case automaticallyIdentified
    case manuallyIdentified
    case confirmed
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  final public let generation: Swift.String?
  final public let trustworthiness: Swift.String?
  final public let medicalGrade: Swift.Bool?
  final public let userReliability: Swift.String?
  final public let chronologicalExactness: Swift.Int?
  final public let timezoneOffset: Swift.Int?
  public init(generation: CoreSDK.Details.Generation?, trustworthiness: CoreSDK.Details.Trustworthiness?, medicalGrade: Swift.Bool?, userReliability: CoreSDK.Details.UserReliability?, chronologicalExactness: Swift.Int?, timezoneOffset: Swift.Int?)
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class PreferencesUtils {
  public struct Credentials {
    public let accessToken: Swift.String
    public let appId: Swift.String
    public let appSecret: Swift.String
  }
  public static func get<T>(key: Swift.String) -> T?
  public static func set(_ value: Any?, for key: Swift.String)
  public static func getCredentials() throws -> CoreSDK.PreferencesUtils.Credentials
  @objc deinit
}
public struct CoreSDKErrors {
  public enum AccessToken : Swift.String, Swift.Error {
    case noAccessTokenFound
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public struct ResponseError : Swift.Error {
  }
}
public class UserInformationUpdateRequest : CoreSDK.Request {
  public init(accessToken: Swift.String, appId: Swift.String, appSecret: Swift.String, data: CoreSDK.User)
  override public init(endPoint: Swift.String, httpMethod: CoreSDK.HttpUtils.Method, contentType: Swift.String, requestBody: Swift.String? = super, appId: Swift.String, appSecret: Swift.String)
  @objc deinit
}
@objc open class NetworkClient : ObjectiveC.NSObject {
  final public let appId: Swift.String
  final public let appSecret: Swift.String
  public init(appId: Swift.String, appSecret: Swift.String)
  public func execute<T>(request: T, completion: @escaping (CoreSDK.Response) -> Swift.Void) where T : CoreSDK.Request
  @objc override dynamic public init()
  @objc deinit
}
extension NetworkClient : Foundation.URLSessionDelegate {
}
public enum Daily : Swift.RawRepresentable, Swift.CaseIterable {
  case weight
  case fatRatio
  case bmi
  case height
  case waistCircumference
  case ambientAudioExposure
  case headphoneAudioExposure
  case audioExposureEvent
  case rest
  case active
  case walk
  case run
  case bike
  case transport
  case steps
  case coveredDistance
  case floorsClimbed
  case burnedCalories
  case activeBurnedCalories
  case hearRate
  case rmssd
  case respirationRate
  case heartRateResting
  case bloodOxygen
  case bodyTemperature
  case bloodPressureSystolic
  case bloodPressureDiastolic
  case vo2max
  case bloodGlucose
  case consumedCalories
  case consumedCarbohydrates
  case consumedFiber
  case consumedSugar
  case consumedFat
  case consumedSaturatedFat
  case consumedProtein
  case consumedVitaminA
  case consumedVitaminB1
  case consumedVitaminB2
  case consumedVitaminB3
  case consumedVitaminB5
  case consumedVitaminB6
  case consumedVitaminB12
  case consumedVitaminC
  case consumedVitaminD
  case consumedVitaminE
  case consumedVitaminK
  case consumedCalcium
  case consumedIron
  case consumedMagnesium
  case consumedPhosphorus
  case consumedPotassium
  case consumedSodium
  case consumedZinc
  case consumedIodine
  public var rawValue: CoreSDK.DataType {
    get
  }
  public init?(rawValue: CoreSDK.DataType)
  public typealias RawValue = CoreSDK.DataType
  public typealias AllCases = [CoreSDK.Daily]
  public static var allCases: [CoreSDK.Daily] {
    get
  }
}
@objc(Tracker) final public class Tracker : ObjectiveC.NSObject {
  public enum Provider : Swift.RawRepresentable, Swift.CaseIterable {
    case fitbit, garmin, misfit, nokia, polar, google, withings, strava, omron, suunto, oura, iHealth, sleepAsAndroid, xiaomi
    public var rawValue: (name: Swift.String?, id: Swift.Int) {
      get
    }
    public init?(rawValue: (name: Swift.String?, id: Swift.Int))
    public typealias RawValue = (name: Swift.String?, id: Swift.Int)
    public static func == (a: CoreSDK.Tracker.Provider, b: CoreSDK.Tracker.Provider) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CoreSDK.Tracker.Provider]
    public static var allCases: [CoreSDK.Tracker.Provider] {
      get
    }
  }
  @objc final public let id: Swift.Int
  @objc final public let name: Swift.String?
  @objc public init(_ name: Swift.String?, _ id: Swift.Int)
  convenience public init(_ provider: CoreSDK.Tracker.Provider)
  @objc override dynamic public init()
  @objc deinit
}
final public class DailyPayload : CoreSDK.PayloadProtocol {
  final public let dataSource: Swift.Int16
  final public var data: [CoreSDK.DailyPayload.Value]
  public init(_ dataSource: Swift.Int16, _ data: [CoreSDK.DailyPayload.Value])
  final public class Value : Swift.Codable {
    public init(_ day: Foundation.Date, _ type: CoreSDK.DataType, _ value: Swift.String)
    @objc deinit
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc deinit
  public typealias Payload = CoreSDK.DailyPayload.Value
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(CoreConnector) final public class CoreConnector : ObjectiveC.NSObject {
  @objc public init(appId: Swift.String, appSecret: Swift.String, partnerUserId: Swift.String? = nil, language: Swift.String? = nil)
  @objc final public func setAccessToken(_ accessToken: Swift.String)
  @objc final public func getAccessToken(onSuccess: @escaping (Swift.String) -> Swift.Void, onError: @escaping (Swift.Error) -> Swift.Void)
  @objc final public func getDataSourceUrl(onSuccess: @escaping (Swift.String, Swift.String) -> Swift.Void, onError: @escaping (Swift.Error) -> Swift.Void)
  @objc final public func handleDataSourceConnection(loadOn webView: WebKit.WKWebView, onError: @escaping (Swift.Error) -> Swift.Void)
  @objc final public func uploadConstantValue(data: CoreSDK.CustomerValue, onError: @escaping (Swift.Error) -> ())
  @objc final public func uploadDailyDynamicValue(data: CoreSDK.CustomerValue, onError: @escaping (Swift.Error) -> ())
  @objc final public func uploadUserInformation(data: CoreSDK.User, onError: @escaping (Swift.Error) -> ())
  @objc final public func getUserInformation(onSuccess: @escaping ([CoreSDK.UserInformation]) -> (), onError: @escaping (Swift.Error) -> ())
  @objc final public func requestHandleDataSourceDirectConnection(isConnection: Swift.Bool, isInstantRevoke: Swift.Bool = false, for dataSource: CoreSDK.Tracker, listenTo webView: WebKit.WKWebView, onError: @escaping (Swift.Error) -> Swift.Void)
  @objc final public func responseHandleDataSourceDirectConnection(onResult: @escaping (Foundation.URL, Swift.Bool) -> Swift.Void, onError: @escaping (Swift.Error) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
open class ValueUpdateRequest<T> : CoreSDK.Request where T : CoreSDK.ValueProtocol {
  public init(endPoint: Swift.String, accessToken: Swift.String, appId: Swift.String, appSecret: Swift.String, data: T)
  override public init(endPoint: Swift.String, httpMethod: CoreSDK.HttpUtils.Method, contentType: Swift.String, requestBody: Swift.String? = super, appId: Swift.String, appSecret: Swift.String)
  @objc deinit
}
@objc(User) public class User : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(height: Foundation.NSNumber?, weight: Foundation.NSNumber?, birthdate: Swift.String?, gender: CoreSDK.Gender)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
open class Response {
  final public let isSuccessful: Swift.Bool
  final public let data: Foundation.Data?
  final public let error: Swift.Error?
  @objc deinit
}
final public class HttpUtils {
  public enum Method : Swift.String {
    case post
    case get
    case put
    case delete
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public enum HeaderField : Swift.String {
    case authorization
    case contentType
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public enum HeaderValue : Swift.String {
    case urlEncoded
    case applicationJson
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  @objc deinit
}
final public class EpochPayload : CoreSDK.PayloadProtocol {
  final public let dataSource: Swift.Int16
  final public var data: [CoreSDK.EpochPayload.Value]
  public init(_ dataSource: Swift.Int16, _ data: [CoreSDK.EpochPayload.Value])
  final public class Value : Swift.Codable {
    public init(_ startTimestamp: Foundation.Date, _ endTimestamp: Foundation.Date?, _ dynamicValueType: Swift.Int16, _ value: Swift.String, _ details: CoreSDK.Details?)
    @objc deinit
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc deinit
  public typealias Payload = CoreSDK.EpochPayload.Value
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Date {
  public static var Z: Swift.String {
    get
  }
  public static var extendedZ: Swift.String {
    get
  }
  public static var yyyyMMdd: Swift.String {
    get
  }
  public func formatted(with format: Swift.String) -> Swift.String
  public var startOfDay: Foundation.Date {
    get
  }
  public var endOfDay: Foundation.Date {
    get
  }
  public var yesterday: Foundation.Date {
    get
  }
  public var oneWeekAgo: Foundation.Date {
    get
  }
  public var oneMonthAgo: Foundation.Date {
    get
  }
  public var oneYearAgo: Foundation.Date {
    get
  }
  public var midnight: Foundation.Date {
    get
  }
  public static var oneMinuteInSeconds: Foundation.TimeInterval {
    get
  }
  public func roundToMinutes() -> Foundation.Date
  public var minuteDate: Foundation.Date {
    get
  }
}
public protocol PayloadProtocol : CoreSDK.ValueProtocol {
  var dataSource: Swift.Int16 { get }
}
public protocol ValueProtocol : Swift.Decodable, Swift.Encodable {
  associatedtype Payload
  var data: [Self.Payload] { get }
}
@objc(Gender) public enum Gender : Swift.Int {
  case male = 0, female, genderless
  public static var allCases: [CoreSDK.Gender]
  public var string: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ValueType) public enum ValueType : Swift.Int16 {
  case double = 0, long, boolean, date, string
  public typealias RawValue = Swift.Int16
  public init?(rawValue: Swift.Int16)
  public var rawValue: Swift.Int16 {
    get
  }
}
extension ValueType {
  public var string: Swift.String {
    get
  }
  public static let all: [CoreSDK.ValueType]
}
extension CoreSDK.Intraday : Swift.Equatable {}
extension CoreSDK.Intraday : Swift.Hashable {}
extension CoreSDK.Constant : Swift.Equatable {}
extension CoreSDK.Constant : Swift.Hashable {}
extension CoreSDK.Details.Generation : Swift.Equatable {}
extension CoreSDK.Details.Generation : Swift.Hashable {}
extension CoreSDK.Details.Generation : Swift.RawRepresentable {}
extension CoreSDK.Details.Trustworthiness : Swift.Equatable {}
extension CoreSDK.Details.Trustworthiness : Swift.Hashable {}
extension CoreSDK.Details.Trustworthiness : Swift.RawRepresentable {}
extension CoreSDK.Details.UserReliability : Swift.Equatable {}
extension CoreSDK.Details.UserReliability : Swift.Hashable {}
extension CoreSDK.Details.UserReliability : Swift.RawRepresentable {}
extension CoreSDK.CoreSDKErrors.AccessToken : Swift.Equatable {}
extension CoreSDK.CoreSDKErrors.AccessToken : Swift.Hashable {}
extension CoreSDK.CoreSDKErrors.AccessToken : Swift.RawRepresentable {}
extension CoreSDK.Daily : Swift.Equatable {}
extension CoreSDK.Daily : Swift.Hashable {}
extension CoreSDK.Tracker.Provider : Swift.Equatable {}
extension CoreSDK.Tracker.Provider : Swift.Hashable {}
extension CoreSDK.HttpUtils.Method : Swift.Equatable {}
extension CoreSDK.HttpUtils.Method : Swift.Hashable {}
extension CoreSDK.HttpUtils.Method : Swift.RawRepresentable {}
extension CoreSDK.HttpUtils.HeaderField : Swift.Equatable {}
extension CoreSDK.HttpUtils.HeaderField : Swift.Hashable {}
extension CoreSDK.HttpUtils.HeaderField : Swift.RawRepresentable {}
extension CoreSDK.HttpUtils.HeaderValue : Swift.Equatable {}
extension CoreSDK.HttpUtils.HeaderValue : Swift.Hashable {}
extension CoreSDK.HttpUtils.HeaderValue : Swift.RawRepresentable {}
extension CoreSDK.Gender : Swift.Equatable {}
extension CoreSDK.Gender : Swift.Hashable {}
extension CoreSDK.Gender : Swift.RawRepresentable {}
extension CoreSDK.ValueType : Swift.Equatable {}
extension CoreSDK.ValueType : Swift.Hashable {}
extension CoreSDK.ValueType : Swift.RawRepresentable {}
