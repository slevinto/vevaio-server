package com.thryve.connector.library.react.coresdk;

import android.annotation.SuppressLint;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.thryve.connector.sdk.CoreConnector;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ThryveCoreSdkLibraryModule extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;

    private CoreConnector connector;

    public ThryveCoreSdkLibraryModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return "ThryveCoreSdkLibrary";
    }

    @ReactMethod
    public void getAccessToken(String appId, String appSecret,  String partnerUserId,  String language, Callback callback) {
        this.connector = getConnectorInstance(appId, appSecret, partnerUserId, language);
        try
        {
            String accessToken = connector.getAccessToken();
            callback.invoke(accessToken);
        }
        catch (IOException e)
        {
            callback.invoke(e.getMessage());
        }
    }

    @ReactMethod
    public void getDataSourceUrl(Callback callback) {
        try
        {
            String dataSourceUrl = connector.getDataSourceUrl();
            callback.invoke(dataSourceUrl);
        }
        catch (IOException e)
        {
            callback.invoke(e.getMessage());
        }
    }

    @ReactMethod
    public void uploadDailyDynamicValue(int typeId, String value, String date, int valueType, Callback callback) {
        Date parsedDate = getDate(date);
        boolean isUploaded = connector.uploadDailyDynamicValue(parsedDate, typeId, value);
        callback.invoke(isUploaded);
    }

    @ReactMethod
    public void uploadConstantValue(int typeId, String value, int valueType, Callback callback) {
        boolean isUploaded = connector.uploadConstantValue(typeId, value);
        callback.invoke(isUploaded);
    }

    private Date getDate(String string) 
    {
        @SuppressLint("SimpleDateFormat") SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try 
        {
            return simpleDateFormat.parse(string);
        } 
        catch (ParseException e) 
        {
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * Depending on which parameters were passed, different instances of the Connector Module will be initialised. 
     * Be sure to track which appId (especcially partnerUserId if you use it) you are providing, the acccessToken value depends on it.
     */
    private CoreConnector getConnectorInstance(String appId, String appSecret, String partnerUserId, String language)
    {
        return new CoreConnector(this.reactContext, appId, appSecret, partnerUserId, language);
    }
    
}
